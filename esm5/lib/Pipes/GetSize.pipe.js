import { __decorate } from "tslib";
import { Pipe } from '@angular/core';
/*
 * Converts bytes to MB, GB and so on
 * Takes an bytes value argument that defaults to 0.
 * Usage:
 *   value | getSize
 * Example:
 *   {{ 1024 |  getSize}}
 *   formats to: 1 MB
 */
var GetSizePipe = /** @class */ (function () {
    function GetSizePipe() {
    }
    GetSizePipe.prototype.transform = function (value) {
        var bytes = value || 0, sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'], k = 1000, i = Math.floor(Math.log(bytes) / Math.log(k));
        if (bytes === 0) {
            return '0 Byte';
        }
        return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];
    };
    GetSizePipe = __decorate([
        Pipe({ name: 'getSize' })
    ], GetSizePipe);
    return GetSizePipe;
}());
export { GetSizePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2V0U2l6ZS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZpbGUtZHJvcHBhLyIsInNvdXJjZXMiOlsibGliL1BpcGVzL0dldFNpemUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFDbEQ7Ozs7Ozs7O0dBUUc7QUFFSDtJQUFBO0lBYUEsQ0FBQztJQVpHLCtCQUFTLEdBQVQsVUFBVSxLQUFZO1FBQ2xCLElBQUksS0FBSyxHQUFHLEtBQUssSUFBSSxDQUFDLEVBQ2xCLEtBQUssR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQ2pFLENBQUMsR0FBRyxJQUFJLEVBQ1IsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFbEQsSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO1lBQ2IsT0FBTyxRQUFRLENBQUM7U0FDbkI7UUFFRCxPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQVpRLFdBQVc7UUFEdkIsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBQyxDQUFDO09BQ1gsV0FBVyxDQWF2QjtJQUFELGtCQUFDO0NBQUEsQUFiRCxJQWFDO1NBYlksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UGlwZSwgUGlwZVRyYW5zZm9ybX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKlxuICogQ29udmVydHMgYnl0ZXMgdG8gTUIsIEdCIGFuZCBzbyBvbiBcbiAqIFRha2VzIGFuIGJ5dGVzIHZhbHVlIGFyZ3VtZW50IHRoYXQgZGVmYXVsdHMgdG8gMC5cbiAqIFVzYWdlOlxuICogICB2YWx1ZSB8IGdldFNpemVcbiAqIEV4YW1wbGU6XG4gKiAgIHt7IDEwMjQgfCAgZ2V0U2l6ZX19XG4gKiAgIGZvcm1hdHMgdG86IDEgTUJcbiAqL1xuQFBpcGUoe25hbWU6ICdnZXRTaXplJ30pXG5leHBvcnQgY2xhc3MgR2V0U2l6ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICB0cmFuc2Zvcm0odmFsdWU6bnVtYmVyKTpzdHJpbmcge1xuICAgICAgICBsZXQgYnl0ZXMgPSB2YWx1ZSB8fCAwLFxuICAgICAgICAgICAgc2l6ZXMgPSBbJ0J5dGVzJywgJ0tCJywgJ01CJywgJ0dCJywgJ1RCJywgJ1BCJywgJ0VCJywgJ1pCJywgJ1lCJ10sXG4gICAgICAgICAgICBrID0gMTAwMCxcbiAgICAgICAgICAgIGkgPSBNYXRoLmZsb29yKE1hdGgubG9nKGJ5dGVzKSAvIE1hdGgubG9nKGspKTtcblxuICAgICAgICBpZiAoYnl0ZXMgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnMCBCeXRlJztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoYnl0ZXMgLyBNYXRoLnBvdyhrLCBpKSkudG9QcmVjaXNpb24oMykgKyAnICcgKyBzaXplc1tpXTtcbiAgICB9XG59Il19