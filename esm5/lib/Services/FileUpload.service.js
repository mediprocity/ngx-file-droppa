import { __decorate } from "tslib";
import { Injectable, EventEmitter, NgZone } from "@angular/core";
var FileUpload = /** @class */ (function () {
    function FileUpload() {
        this.zone = new NgZone({ enableLongStackTrace: false });
        this.url = null;
        this.beforeRequest = null;
        this.beforeFileUpload = null;
        this.fileUploadedEvent = new EventEmitter(true);
    }
    FileUpload.prototype.uploadFiles = function (iFiles) {
        var _this = this;
        return Promise.all(iFiles.reduce(function (res, iFile) {
            return res.push(_this.uploadFile(iFile)), res;
        }, []));
    };
    FileUpload.prototype.uploadFile = function (iFile) {
        var _this = this;
        if (!this.url) {
            throw "url to upload needs to be provided";
        }
        if (iFile.loading) {
            throw "Already under loading";
        }
        var that = this, formData = new FormData();
        var xhr = new XMLHttpRequest();
        xhr.upload.onprogress = function (event) {
            var progress = (event.loaded * 100) / event.total | 0;
            _this.zone.run(function () {
                iFile.percentage = progress;
            });
        };
        var pr = new Promise(function (resolve, reject) {
            xhr.onload = xhr.onerror = function (e) {
                var _this = this;
                that.zone.run(function () {
                    if (_this["status"] == 200) {
                        iFile.loading = false;
                        iFile.loadingSuccessful = true;
                        resolve(true);
                    }
                    else {
                        iFile.loading = false;
                        iFile.loadingSuccessful = false;
                        reject(false);
                    }
                });
            };
        }).then(function (success) {
            _this.fileUploadedEvent.emit([success, xhr.response, iFile]);
        }, function (reason) {
            _this.fileUploadedEvent.emit([reason, xhr.response, iFile]);
        });
        iFile.loading = true;
        xhr.open("POST", this.url, true);
        //Hook before request to provide user ability to add headers or something else in XHR
        typeof this.beforeRequest === "function" && this.beforeRequest(xhr);
        formData.append("" + iFile.File.name, iFile.File);
        if (typeof this.beforeFileUpload === "function") {
            Promise.resolve(this.beforeFileUpload(formData)).then(function (formData) {
                formData && xhr.send(formData);
                formData || console.warn("beforeFileUpload didn't return formData for " + iFile.File.name + " and upload was aborted");
            });
        }
        else {
            xhr.send(formData);
        }
        return pr;
    };
    FileUpload = __decorate([
        Injectable()
    ], FileUpload);
    return FileUpload;
}());
export { FileUpload };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsZVVwbG9hZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZpbGUtZHJvcHBhLyIsInNvdXJjZXMiOlsibGliL1NlcnZpY2VzL0ZpbGVVcGxvYWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBRSxZQUFZLEVBQWlCLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUc5RTtJQUFBO1FBQ1ksU0FBSSxHQUFHLElBQUksTUFBTSxDQUFDLEVBQUMsb0JBQW9CLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztRQUNsRCxRQUFHLEdBQUcsSUFBSSxDQUFDO1FBQ1gsa0JBQWEsR0FBRyxJQUFJLENBQUM7UUFDckIscUJBQWdCLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLHNCQUFpQixHQUFHLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBc0V0RCxDQUFDO0lBcEVHLGdDQUFXLEdBQVgsVUFBWSxNQUFNO1FBQWxCLGlCQUlDO1FBSEcsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBQyxHQUFHLEVBQUUsS0FBSztZQUN4QyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUNqRCxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUNYLENBQUM7SUFFRCwrQkFBVSxHQUFWLFVBQVcsS0FBSztRQUFoQixpQkEyREM7UUExREcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDWCxNQUFNLG9DQUFvQyxDQUFDO1NBQzlDO1FBQ0QsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO1lBQ2YsTUFBTSx1QkFBdUIsQ0FBQztTQUNqQztRQUNELElBQUksSUFBSSxHQUFHLElBQUksRUFDWCxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUc5QixJQUFN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ZWN0YWJsZSwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIElucHV0LCBOZ1pvbmV9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGaWxlVXBsb2FkIHtcbiAgICBwcml2YXRlIHpvbmUgPSBuZXcgTmdab25lKHtlbmFibGVMb25nU3RhY2tUcmFjZTogZmFsc2V9KTtcbiAgICBwdWJsaWMgdXJsID0gbnVsbDtcbiAgICBwdWJsaWMgYmVmb3JlUmVxdWVzdCA9IG51bGw7XG4gICAgcHVibGljIGJlZm9yZUZpbGVVcGxvYWQgPSBudWxsO1xuICAgIHB1YmxpYyBmaWxlVXBsb2FkZWRFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXIodHJ1ZSk7XG5cbiAgICB1cGxvYWRGaWxlcyhpRmlsZXMpe1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoaUZpbGVzLnJlZHVjZSgocmVzLCBpRmlsZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5wdXNoKHRoaXMudXBsb2FkRmlsZShpRmlsZSkpLCByZXM7XG4gICAgICAgIH0sIFtdKSlcbiAgICB9XG5cbiAgICB1cGxvYWRGaWxlKGlGaWxlKSB7XG4gICAgICAgIGlmICghdGhpcy51cmwpIHtcbiAgICAgICAgICAgIHRocm93IFwidXJsIHRvIHVwbG9hZCBuZWVkcyB0byBiZSBwcm92aWRlZFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpRmlsZS5sb2FkaW5nKSB7XG4gICAgICAgICAgICB0aHJvdyBcIkFscmVhZHkgdW5kZXIgbG9hZGluZ1wiO1xuICAgICAgICB9XG4gICAgICAgIGxldCB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG5cblxuICAgICAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgICB4aHIudXBsb2FkLm9ucHJvZ3Jlc3MgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGxldCBwcm9ncmVzcyA9IChldmVudC5sb2FkZWQgKiAxMDApIC8gZXZlbnQudG90YWwgfCAwO1xuICAgICAgICAgICAgdGhpcy56b25lLnJ1bigoKT0+IHtcbiAgICAgICAgICAgICAgICBpRmlsZS5wZXJjZW50YWdlID0gcHJvZ3Jlc3M7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHByID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PiB7XG4gICAgICAgICAgICB4aHIub25sb2FkID0geGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHRoYXQuem9uZS5ydW4oKCk9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW1wic3RhdHVzXCJdID09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaUZpbGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaUZpbGUubG9hZGluZ1N1Y2Nlc3NmdWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlGaWxlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlGaWxlLmxvYWRpbmdTdWNjZXNzZnVsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLnRoZW4oKHN1Y2Nlc3MpPT57XG4gICAgICAgICAgICB0aGlzLmZpbGVVcGxvYWRlZEV2ZW50LmVtaXQoW3N1Y2Nlc3MsIHhoci5yZXNwb25zZSwgaUZpbGVdKTtcbiAgICAgICAgfSwgKHJlYXNvbik9PntcbiAgICAgICAgICAgIHRoaXMuZmlsZVVwbG9hZGVkRXZlbnQuZW1pdChbcmVhc29uLCB4aHIucmVzcG9uc2UsIGlGaWxlXSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlGaWxlLmxvYWRpbmcgPSB0cnVlO1xuXG4gICAgICAgIHhoci5vcGVuKFwiUE9TVFwiLCB0aGlzLnVybCwgdHJ1ZSk7XG5cbiAgICAgICAgLy9Ib29rIGJlZm9yZSByZXF1ZXN0IHRvIHByb3ZpZGUgdXNlciBhYmlsaXR5IHRvIGFkZCBoZWFkZXJzIG9yIHNvbWV0aGluZyBlbHNlIGluIFhIUlxuICAgICAgICB0eXBlb2YgdGhpcy5iZWZvcmVSZXF1ZXN0ID09PSBcImZ1bmN0aW9uXCIgJiYgdGhpcy5iZWZvcmVSZXF1ZXN0KHhocik7XG5cbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKGAke2lGaWxlLkZpbGUubmFtZX1gLCBpRmlsZS5GaWxlKTtcblxuICAgICAgICBpZih0eXBlb2YgdGhpcy5iZWZvcmVGaWxlVXBsb2FkID09PSBcImZ1bmN0aW9uXCIpe1xuICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHRoaXMuYmVmb3JlRmlsZVVwbG9hZChmb3JtRGF0YSkpLnRoZW4oKGZvcm1EYXRhKT0+IHtcbiAgICAgICAgICAgICAgICBmb3JtRGF0YSAmJiB4aHIuc2VuZChmb3JtRGF0YSk7XG4gICAgICAgICAgICAgICAgZm9ybURhdGEgfHwgY29uc29sZS53YXJuKGBiZWZvcmVGaWxlVXBsb2FkIGRpZG4ndCByZXR1cm4gZm9ybURhdGEgZm9yICR7aUZpbGUuRmlsZS5uYW1lfSBhbmQgdXBsb2FkIHdhcyBhYm9ydGVkYCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHhoci5zZW5kKGZvcm1EYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwcjtcbiAgICB9XG5cblxufSAgICAgXG4iXX0=