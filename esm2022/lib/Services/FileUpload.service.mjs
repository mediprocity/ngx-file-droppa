import { Injectable, EventEmitter, NgZone } from "@angular/core";
import * as i0 from "@angular/core";
export class FileUpload {
    constructor() {
        this.zone = new NgZone({ enableLongStackTrace: false });
        this.url = null;
        this.beforeRequest = null;
        this.beforeFileUpload = null;
        this.fileUploadedEvent = new EventEmitter(true);
    }
    uploadFiles(iFiles) {
        return Promise.all(iFiles.reduce((res, iFile) => {
            return res.push(this.uploadFile(iFile)), res;
        }, []));
    }
    uploadFile(iFile) {
        if (!this.url) {
            throw "url to upload needs to be provided";
        }
        if (iFile.loading) {
            throw "Already under loading";
        }
        let that = this, formData = new FormData();
        const xhr = new XMLHttpRequest();
        xhr.upload.onprogress = (event) => {
            let progress = (event.loaded * 100) / event.total | 0;
            this.zone.run(() => {
                iFile.percentage = progress;
            });
        };
        const pr = new Promise((resolve, reject) => {
            xhr.onload = xhr.onerror = function (e) {
                that.zone.run(() => {
                    if (this["status"] == 200) {
                        iFile.loading = false;
                        iFile.loadingSuccessful = true;
                        resolve(true);
                    }
                    else {
                        iFile.loading = false;
                        iFile.loadingSuccessful = false;
                        reject(false);
                    }
                });
            };
        }).then((success) => {
            this.fileUploadedEvent.emit([success, xhr.response, iFile]);
        }, (reason) => {
            this.fileUploadedEvent.emit([reason, xhr.response, iFile]);
        });
        iFile.loading = true;
        xhr.open("POST", this.url, true);
        //Hook before request to provide user ability to add headers or something else in XHR
        typeof this.beforeRequest === "function" && this.beforeRequest(xhr);
        formData.append(`${iFile.File.name}`, iFile.File);
        if (typeof this.beforeFileUpload === "function") {
            Promise.resolve(this.beforeFileUpload(formData)).then((formData) => {
                formData && xhr.send(formData);
                formData || console.warn(`beforeFileUpload didn't return formData for ${iFile.File.name} and upload was aborted`);
            });
        }
        else {
            xhr.send(formData);
        }
        return pr;
    }
    static { this.ɵfac = function FileUpload_Factory(t) { return new (t || FileUpload)(); }; }
    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: FileUpload, factory: FileUpload.ɵfac }); }
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(FileUpload, [{
        type: Injectable
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsZVVwbG9hZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWZpbGUtZHJvcHBhL3NyYy9saWIvU2VydmljZXMvRmlsZVVwbG9hZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsWUFBWSxFQUFpQixNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7O0FBRzlFLE1BQU0sT0FBTyxVQUFVO0lBRHZCO1FBRVksU0FBSSxHQUFHLElBQUksTUFBTSxDQUFDLEVBQUMsb0JBQW9CLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztRQUNsRCxRQUFHLEdBQUcsSUFBSSxDQUFDO1FBQ1gsa0JBQWEsR0FBRyxJQUFJLENBQUM7UUFDckIscUJBQWdCLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLHNCQUFpQixHQUFHLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBc0VyRDtJQXBFRyxXQUFXLENBQUMsTUFBTTtRQUNkLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQzVDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO1FBQ2pELENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ1gsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFLO1FBQ1osSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDWCxNQUFNLG9DQUFvQyxDQUFDO1NBQzlDO1FBQ0QsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO1lBQ2YsTUFBTSx1QkFBdUIsQ0FBQztTQUNqQztRQUNELElBQUksSUFBSSxHQUFHLElBQUksRUFDWCxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUc5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Y0FEdEIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZSwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIElucHV0LCBOZ1pvbmV9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGaWxlVXBsb2FkIHtcbiAgICBwcml2YXRlIHpvbmUgPSBuZXcgTmdab25lKHtlbmFibGVMb25nU3RhY2tUcmFjZTogZmFsc2V9KTtcbiAgICBwdWJsaWMgdXJsID0gbnVsbDtcbiAgICBwdWJsaWMgYmVmb3JlUmVxdWVzdCA9IG51bGw7XG4gICAgcHVibGljIGJlZm9yZUZpbGVVcGxvYWQgPSBudWxsO1xuICAgIHB1YmxpYyBmaWxlVXBsb2FkZWRFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXIodHJ1ZSk7XG5cbiAgICB1cGxvYWRGaWxlcyhpRmlsZXMpe1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoaUZpbGVzLnJlZHVjZSgocmVzLCBpRmlsZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5wdXNoKHRoaXMudXBsb2FkRmlsZShpRmlsZSkpLCByZXM7XG4gICAgICAgIH0sIFtdKSlcbiAgICB9XG5cbiAgICB1cGxvYWRGaWxlKGlGaWxlKSB7XG4gICAgICAgIGlmICghdGhpcy51cmwpIHtcbiAgICAgICAgICAgIHRocm93IFwidXJsIHRvIHVwbG9hZCBuZWVkcyB0byBiZSBwcm92aWRlZFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpRmlsZS5sb2FkaW5nKSB7XG4gICAgICAgICAgICB0aHJvdyBcIkFscmVhZHkgdW5kZXIgbG9hZGluZ1wiO1xuICAgICAgICB9XG4gICAgICAgIGxldCB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG5cblxuICAgICAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgICB4aHIudXBsb2FkLm9ucHJvZ3Jlc3MgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGxldCBwcm9ncmVzcyA9IChldmVudC5sb2FkZWQgKiAxMDApIC8gZXZlbnQudG90YWwgfCAwO1xuICAgICAgICAgICAgdGhpcy56b25lLnJ1bigoKT0+IHtcbiAgICAgICAgICAgICAgICBpRmlsZS5wZXJjZW50YWdlID0gcHJvZ3Jlc3M7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHByID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PiB7XG4gICAgICAgICAgICB4aHIub25sb2FkID0geGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHRoYXQuem9uZS5ydW4oKCk9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW1wic3RhdHVzXCJdID09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaUZpbGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaUZpbGUubG9hZGluZ1N1Y2Nlc3NmdWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlGaWxlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlGaWxlLmxvYWRpbmdTdWNjZXNzZnVsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLnRoZW4oKHN1Y2Nlc3MpPT57XG4gICAgICAgICAgICB0aGlzLmZpbGVVcGxvYWRlZEV2ZW50LmVtaXQoW3N1Y2Nlc3MsIHhoci5yZXNwb25zZSwgaUZpbGVdKTtcbiAgICAgICAgfSwgKHJlYXNvbik9PntcbiAgICAgICAgICAgIHRoaXMuZmlsZVVwbG9hZGVkRXZlbnQuZW1pdChbcmVhc29uLCB4aHIucmVzcG9uc2UsIGlGaWxlXSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlGaWxlLmxvYWRpbmcgPSB0cnVlO1xuXG4gICAgICAgIHhoci5vcGVuKFwiUE9TVFwiLCB0aGlzLnVybCwgdHJ1ZSk7XG5cbiAgICAgICAgLy9Ib29rIGJlZm9yZSByZXF1ZXN0IHRvIHByb3ZpZGUgdXNlciBhYmlsaXR5IHRvIGFkZCBoZWFkZXJzIG9yIHNvbWV0aGluZyBlbHNlIGluIFhIUlxuICAgICAgICB0eXBlb2YgdGhpcy5iZWZvcmVSZXF1ZXN0ID09PSBcImZ1bmN0aW9uXCIgJiYgdGhpcy5iZWZvcmVSZXF1ZXN0KHhocik7XG5cbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKGAke2lGaWxlLkZpbGUubmFtZX1gLCBpRmlsZS5GaWxlKTtcblxuICAgICAgICBpZih0eXBlb2YgdGhpcy5iZWZvcmVGaWxlVXBsb2FkID09PSBcImZ1bmN0aW9uXCIpe1xuICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHRoaXMuYmVmb3JlRmlsZVVwbG9hZChmb3JtRGF0YSkpLnRoZW4oKGZvcm1EYXRhKT0+IHtcbiAgICAgICAgICAgICAgICBmb3JtRGF0YSAmJiB4aHIuc2VuZChmb3JtRGF0YSk7XG4gICAgICAgICAgICAgICAgZm9ybURhdGEgfHwgY29uc29sZS53YXJuKGBiZWZvcmVGaWxlVXBsb2FkIGRpZG4ndCByZXR1cm4gZm9ybURhdGEgZm9yICR7aUZpbGUuRmlsZS5uYW1lfSBhbmQgdXBsb2FkIHdhcyBhYm9ydGVkYCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHhoci5zZW5kKGZvcm1EYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwcjtcbiAgICB9XG5cblxufSAgICAgXG4iXX0=