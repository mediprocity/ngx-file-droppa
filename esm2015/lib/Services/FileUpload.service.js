import { __decorate } from "tslib";
import { Injectable, EventEmitter, NgZone } from "@angular/core";
let FileUpload = class FileUpload {
    constructor() {
        this.zone = new NgZone({ enableLongStackTrace: false });
        this.url = null;
        this.beforeRequest = null;
        this.beforeFileUpload = null;
        this.fileUploadedEvent = new EventEmitter(true);
    }
    uploadFiles(iFiles) {
        return Promise.all(iFiles.reduce((res, iFile) => {
            return res.push(this.uploadFile(iFile)), res;
        }, []));
    }
    uploadFile(iFile) {
        if (!this.url) {
            throw "url to upload needs to be provided";
        }
        if (iFile.loading) {
            throw "Already under loading";
        }
        let that = this, formData = new FormData();
        const xhr = new XMLHttpRequest();
        xhr.upload.onprogress = (event) => {
            let progress = (event.loaded * 100) / event.total | 0;
            this.zone.run(() => {
                iFile.percentage = progress;
            });
        };
        const pr = new Promise((resolve, reject) => {
            xhr.onload = xhr.onerror = function (e) {
                that.zone.run(() => {
                    if (this["status"] == 200) {
                        iFile.loading = false;
                        iFile.loadingSuccessful = true;
                        resolve(true);
                    }
                    else {
                        iFile.loading = false;
                        iFile.loadingSuccessful = false;
                        reject(false);
                    }
                });
            };
        }).then((success) => {
            this.fileUploadedEvent.emit([success, xhr.response, iFile]);
        }, (reason) => {
            this.fileUploadedEvent.emit([reason, xhr.response, iFile]);
        });
        iFile.loading = true;
        xhr.open("POST", this.url, true);
        //Hook before request to provide user ability to add headers or something else in XHR
        typeof this.beforeRequest === "function" && this.beforeRequest(xhr);
        formData.append(`${iFile.File.name}`, iFile.File);
        if (typeof this.beforeFileUpload === "function") {
            Promise.resolve(this.beforeFileUpload(formData)).then((formData) => {
                formData && xhr.send(formData);
                formData || console.warn(`beforeFileUpload didn't return formData for ${iFile.File.name} and upload was aborted`);
            });
        }
        else {
            xhr.send(formData);
        }
        return pr;
    }
};
FileUpload = __decorate([
    Injectable()
], FileUpload);
export { FileUpload };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsZVVwbG9hZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZpbGUtZHJvcHBhLyIsInNvdXJjZXMiOlsibGliL1NlcnZpY2VzL0ZpbGVVcGxvYWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBRSxZQUFZLEVBQWlCLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUc5RSxJQUFhLFVBQVUsR0FBdkIsTUFBYSxVQUFVO0lBQXZCO1FBQ1ksU0FBSSxHQUFHLElBQUksTUFBTSxDQUFDLEVBQUMsb0JBQW9CLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztRQUNsRCxRQUFHLEdBQUcsSUFBSSxDQUFDO1FBQ1gsa0JBQWEsR0FBRyxJQUFJLENBQUM7UUFDckIscUJBQWdCLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLHNCQUFpQixHQUFHLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBc0V0RCxDQUFDO0lBcEVHLFdBQVcsQ0FBQyxNQUFNO1FBQ2QsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDNUMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUM7UUFDakQsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDWCxDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQUs7UUFDWixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNYLE1BQU0sb0NBQW9DLENBQUM7U0FDOUM7UUFDRCxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7WUFDZixNQUFNLHVCQUF1QixDQUFDO1NBQ2pDO1FBQ0QsSUFBSSxJQUFJLEdBQUcsSUFBSSxFQUNYLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBRzlCLE1BQU0s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QjtTQTNFWSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlLCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgSW5wdXQsIE5nWm9uZX0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZpbGVVcGxvYWQge1xuICAgIHByaXZhdGUgem9uZSA9IG5ldyBOZ1pvbmUoe2VuYWJsZUxvbmdTdGFja1RyYWNlOiBmYWxzZX0pO1xuICAgIHB1YmxpYyB1cmwgPSBudWxsO1xuICAgIHB1YmxpYyBiZWZvcmVSZXF1ZXN0ID0gbnVsbDtcbiAgICBwdWJsaWMgYmVmb3JlRmlsZVVwbG9hZCA9IG51bGw7XG4gICAgcHVibGljIGZpbGVVcGxvYWRlZEV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcih0cnVlKTtcblxuICAgIHVwbG9hZEZpbGVzKGlGaWxlcyl7XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChpRmlsZXMucmVkdWNlKChyZXMsIGlGaWxlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnB1c2godGhpcy51cGxvYWRGaWxlKGlGaWxlKSksIHJlcztcbiAgICAgICAgfSwgW10pKVxuICAgIH1cblxuICAgIHVwbG9hZEZpbGUoaUZpbGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLnVybCkge1xuICAgICAgICAgICAgdGhyb3cgXCJ1cmwgdG8gdXBsb2FkIG5lZWRzIHRvIGJlIHByb3ZpZGVkXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlGaWxlLmxvYWRpbmcpIHtcbiAgICAgICAgICAgIHRocm93IFwiQWxyZWFkeSB1bmRlciBsb2FkaW5nXCI7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcblxuXG4gICAgICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICAgIHhoci51cGxvYWQub25wcm9ncmVzcyA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgbGV0IHByb2dyZXNzID0gKGV2ZW50LmxvYWRlZCAqIDEwMCkgLyBldmVudC50b3RhbCB8IDA7XG4gICAgICAgICAgICB0aGlzLnpvbmUucnVuKCgpPT4ge1xuICAgICAgICAgICAgICAgIGlGaWxlLnBlcmNlbnRhZ2UgPSBwcm9ncmVzcztcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcHIgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+IHtcbiAgICAgICAgICAgIHhoci5vbmxvYWQgPSB4aHIub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdGhhdC56b25lLnJ1bigoKT0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNbXCJzdGF0dXNcIl0gPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpRmlsZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpRmlsZS5sb2FkaW5nU3VjY2Vzc2Z1bCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaUZpbGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaUZpbGUubG9hZGluZ1N1Y2Nlc3NmdWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkudGhlbigoc3VjY2Vzcyk9PntcbiAgICAgICAgICAgIHRoaXMuZmlsZVVwbG9hZGVkRXZlbnQuZW1pdChbc3VjY2VzcywgeGhyLnJlc3BvbnNlLCBpRmlsZV0pO1xuICAgICAgICB9LCAocmVhc29uKT0+e1xuICAgICAgICAgICAgdGhpcy5maWxlVXBsb2FkZWRFdmVudC5lbWl0KFtyZWFzb24sIHhoci5yZXNwb25zZSwgaUZpbGVdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaUZpbGUubG9hZGluZyA9IHRydWU7XG5cbiAgICAgICAgeGhyLm9wZW4oXCJQT1NUXCIsIHRoaXMudXJsLCB0cnVlKTtcblxuICAgICAgICAvL0hvb2sgYmVmb3JlIHJlcXVlc3QgdG8gcHJvdmlkZSB1c2VyIGFiaWxpdHkgdG8gYWRkIGhlYWRlcnMgb3Igc29tZXRoaW5nIGVsc2UgaW4gWEhSXG4gICAgICAgIHR5cGVvZiB0aGlzLmJlZm9yZVJlcXVlc3QgPT09IFwiZnVuY3Rpb25cIiAmJiB0aGlzLmJlZm9yZVJlcXVlc3QoeGhyKTtcblxuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoYCR7aUZpbGUuRmlsZS5uYW1lfWAsIGlGaWxlLkZpbGUpO1xuXG4gICAgICAgIGlmKHR5cGVvZiB0aGlzLmJlZm9yZUZpbGVVcGxvYWQgPT09IFwiZnVuY3Rpb25cIil7XG4gICAgICAgICAgICBQcm9taXNlLnJlc29sdmUodGhpcy5iZWZvcmVGaWxlVXBsb2FkKGZvcm1EYXRhKSkudGhlbigoZm9ybURhdGEpPT4ge1xuICAgICAgICAgICAgICAgIGZvcm1EYXRhICYmIHhoci5zZW5kKGZvcm1EYXRhKTtcbiAgICAgICAgICAgICAgICBmb3JtRGF0YSB8fCBjb25zb2xlLndhcm4oYGJlZm9yZUZpbGVVcGxvYWQgZGlkbid0IHJldHVybiBmb3JtRGF0YSBmb3IgJHtpRmlsZS5GaWxlLm5hbWV9IGFuZCB1cGxvYWQgd2FzIGFib3J0ZWRgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeGhyLnNlbmQoZm9ybURhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHByO1xuICAgIH1cblxuXG59ICAgICBcbiJdfQ==