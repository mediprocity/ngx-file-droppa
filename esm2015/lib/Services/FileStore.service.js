import { __decorate } from "tslib";
import { Injectable, EventEmitter } from "@angular/core";
import { FileWrapper } from "./FileWrapper.service";
let FilesStore = class FilesStore {
    constructor() {
        this.filesUpdated = new EventEmitter(true);
        this.startAutoUploading = null;
        this.beforeAddFile = null;
        this.WSfiles = new WeakSet();
        this._iFiles = [];
    }
    get files() {
        return this.iFiles.reduce((res, iFile) => {
            res.push(iFile.File);
            return res;
        }, []);
    }
    get iFiles() {
        return this._iFiles;
    }
    set iFiles(files) {
        this._iFiles = files;
    }
    addFiles(files) {
        files = files.filter((file) => {
            if (!this.WSfiles.has(file)) {
                if (typeof this.beforeAddFile === "function" && this.beforeAddFile(file)) {
                    this.WSfiles.add(file);
                    return true;
                }
                else if (typeof this.beforeAddFile !== "function") {
                    return true;
                }
                return false;
            }
        }).map((file) => {
            let iFile = new FileWrapper(file);
            this.startAutoUploading && this.startAutoUploading(iFile);
            return iFile;
        });
        this.iFiles = [...this.iFiles, ...files];
        this.filesUpdated.emit(true);
    }
    removeFiles(iFile) {
        this.WSfiles.delete(iFile.File);
        this.iFiles = this.iFiles.filter((item) => {
            return item.id !== iFile.id;
        });
        this.filesUpdated.emit(true);
    }
    clearStore() {
        this.iFiles.forEach((iFile) => {
            this.WSfiles.delete(iFile.File);
        });
        this.iFiles = [];
        this.filesUpdated.emit(true);
    }
};
FilesStore = __decorate([
    Injectable()
], FilesStore);
export { FilesStore };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsZVN0b3JlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZmlsZS1kcm9wcGEvIiwic291cmNlcyI6WyJsaWIvU2VydmljZXMvRmlsZVN0b3JlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsWUFBWSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBR3ZELE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUdsRCxJQUFhLFVBQVUsR0FBdkIsTUFBYSxVQUFVO0lBQXZCO1FBQ1csaUJBQVksR0FBRyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0Qyx1QkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDMUIsa0JBQWEsR0FBTyxJQUFJLENBQUM7UUFFeEIsWUFBTyxHQUFpQixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ3RDLFlBQU8sR0FBZ0IsRUFBRSxDQUFDO0lBb0R0QyxDQUFDO0lBbERHLElBQVcsS0FBSztRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBVyxFQUFDLEVBQUU7WUFDMUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckIsT0FBTyxHQUFHLENBQUM7UUFDZixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRUQsSUFBVyxNQUFNO1FBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFXLE1BQU0sQ0FBQyxLQUFLO1FBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3pCLENBQUM7SUFFTSxRQUFRLENBQUMsS0FBSztRQUNqQixLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBQyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDekIsSUFBRyxPQUFPLElBQUksQ0FBQyxhQUFhLEtBQUssVUFBVSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUM7b0JBQ3BFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUN2QixPQUFPLElBQUksQ0FBQztpQkFDZjtxQkFBTSxJQUFHLE9BQU8sSUFBSSxDQUFDLGFBQWEsS0FBSyxVQUFVLEVBQUU7b0JBQ2hELE9BQU8sSUFBSSxDQUFDO2lCQUNmO2dCQUNELE9BQU8sS0FBSyxDQUFDO2FBQ2hCO1FBQ0wsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFDLEVBQUU7WUFDWCxJQUFJLEtBQUssR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsQyxJQUFJLENBQUMsa0JBQWtCLElBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFELE9BQU8sS0FBSyxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFTSxXQUFXLENBQUMsS0FBVztRQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBQyxFQUFFO1lBQ3JDLE9BQU8sSUFBSSxDQUFDLEVBQUUsS0FBSyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVNLFVBQVU7UUFDYixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBQyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Q0FDSixDQUFBO0FBMURZLFVBQVU7SUFEdEIsVUFBVSxFQUFFO0dBQ0EsVUFBVSxDQTBEdEI7U0ExRFksVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZSwgRXZlbnRFbWl0dGVyfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtGaWxlVXBsb2FkfSBmcm9tIFwiLi9GaWxlVXBsb2FkLnNlcnZpY2VcIjtcbmltcG9ydCB7aUZpbGV9IGZyb20gXCIuL0ZpbGVXcmFwcGVyLnNlcnZpY2VcIjtcbmltcG9ydCB7RmlsZVdyYXBwZXJ9IGZyb20gXCIuL0ZpbGVXcmFwcGVyLnNlcnZpY2VcIjtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZpbGVzU3RvcmUge1xuICAgIHB1YmxpYyBmaWxlc1VwZGF0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyKHRydWUpO1xuICAgIHB1YmxpYyBzdGFydEF1dG9VcGxvYWRpbmcgPSBudWxsO1xuICAgIHB1YmxpYyBiZWZvcmVBZGRGaWxlOmFueSA9IG51bGw7XG5cbiAgICBwcml2YXRlIFdTZmlsZXM6V2Vha1NldDxGaWxlPiA9IG5ldyBXZWFrU2V0KCk7XG4gICAgcHJpdmF0ZSBfaUZpbGVzOkFycmF5PGlGaWxlPiA9IFtdO1xuXG4gICAgcHVibGljIGdldCBmaWxlcygpOkFycmF5PEZpbGU+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaUZpbGVzLnJlZHVjZSgocmVzLCBpRmlsZTppRmlsZSk9PiB7XG4gICAgICAgICAgICByZXMucHVzaChpRmlsZS5GaWxlKTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0sIFtdKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGlGaWxlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lGaWxlcztcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IGlGaWxlcyhmaWxlcykge1xuICAgICAgICB0aGlzLl9pRmlsZXMgPSBmaWxlcztcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkRmlsZXMoZmlsZXMpOnZvaWQge1xuICAgICAgICBmaWxlcyA9IGZpbGVzLmZpbHRlcigoZmlsZSk9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuV1NmaWxlcy5oYXMoZmlsZSkpIHtcbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgdGhpcy5iZWZvcmVBZGRGaWxlID09PSBcImZ1bmN0aW9uXCIgJiYgdGhpcy5iZWZvcmVBZGRGaWxlKGZpbGUpKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5XU2ZpbGVzLmFkZChmaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKHR5cGVvZiB0aGlzLmJlZm9yZUFkZEZpbGUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS5tYXAoKGZpbGUpPT4ge1xuICAgICAgICAgICAgbGV0IGlGaWxlID0gbmV3IEZpbGVXcmFwcGVyKGZpbGUpO1xuICAgICAgICAgICAgdGhpcy5zdGFydEF1dG9VcGxvYWRpbmcgJiYgdGhpcy5zdGFydEF1dG9VcGxvYWRpbmcoaUZpbGUpO1xuICAgICAgICAgICAgcmV0dXJuIGlGaWxlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pRmlsZXMgPSBbLi4udGhpcy5pRmlsZXMsIC4uLmZpbGVzXTtcbiAgICAgICAgdGhpcy5maWxlc1VwZGF0ZWQuZW1pdCh0cnVlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlRmlsZXMoaUZpbGU6aUZpbGUpOnZvaWQge1xuICAgICAgICB0aGlzLldTZmlsZXMuZGVsZXRlKGlGaWxlLkZpbGUpO1xuICAgICAgICB0aGlzLmlGaWxlcyA9IHRoaXMuaUZpbGVzLmZpbHRlcigoaXRlbSk9PntcbiAgICAgICAgICAgIHJldHVybiBpdGVtLmlkICE9PSBpRmlsZS5pZDtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZmlsZXNVcGRhdGVkLmVtaXQodHJ1ZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGNsZWFyU3RvcmUoKTp2b2lkIHtcbiAgICAgICAgdGhpcy5pRmlsZXMuZm9yRWFjaCgoaUZpbGUpPT4ge1xuICAgICAgICAgICAgdGhpcy5XU2ZpbGVzLmRlbGV0ZShpRmlsZS5GaWxlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaUZpbGVzID0gW107XG4gICAgICAgIHRoaXMuZmlsZXNVcGRhdGVkLmVtaXQodHJ1ZSk7XG4gICAgfVxufSJdfQ==